/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package barcoder;

import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableImage;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

/**
 *
 * @author Seth
 */
public class BarCoderUI extends javax.swing.JFrame {

    /**
     * Creates new form BarCoderUI
     */
    public BarCoderUI() {
        initComponents();
        //Here is where we load DB into UI
        for (Barcode barcodes : BarCoder.barcodeDB) {
            BarcodeList.add(barcodes.toString());
        }
        for (Recipients recipient : BarCoder.recipientDB) {
            receiverCategory.addItem(recipient.categoryName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        destiPrompt = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        receiverCategory = new javax.swing.JComboBox();
        receiverText = new javax.swing.JComboBox();
        addCatButton = new javax.swing.JButton();
        addRecButton = new javax.swing.JButton();
        delCatButton = new javax.swing.JButton();
        delRecButton = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        addPrompt = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        enterText = new javax.swing.JTextField();
        addTextConfirm = new javax.swing.JButton();
        addTextCancel = new javax.swing.JButton();
        addSeasonPrompt = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        seasonCodeText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        seasonCodeMeaningText = new javax.swing.JTextField();
        seasonPromptConfirm = new javax.swing.JButton();
        seasonPromptCancel = new javax.swing.JButton();
        addFabricPrompt = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        fabCodeText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fabCodeMeaningText = new javax.swing.JTextField();
        fabricPromptConfirm = new javax.swing.JButton();
        fabricPromptCancel = new javax.swing.JButton();
        addClothingPrompt = new javax.swing.JDialog();
        jLabel11 = new javax.swing.JLabel();
        clothingCodeText = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        clothingCodeMeaningText = new javax.swing.JTextField();
        clothingPromptConfirm = new javax.swing.JButton();
        clothingPromptCancel = new javax.swing.JButton();
        editPrompt = new javax.swing.JDialog();
        editCategory = new javax.swing.JLabel();
        editCategoryCombo = new javax.swing.JComboBox();
        editValues = new javax.swing.JLabel();
        editValuesCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        barcode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        BarcodeList = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        barcodeInfo = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        destButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        img = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        dueDatePicker = new datechooser.beans.DateChooserCombo();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addSeason = new javax.swing.JMenuItem();
        addFabric = new javax.swing.JMenuItem();
        addClothing = new javax.swing.JMenuItem();
        saveOverdue = new javax.swing.JMenuItem();
        saveToCSV = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitProg = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        editSeason = new javax.swing.JMenuItem();
        editFabric = new javax.swing.JMenuItem();
        editClothing = new javax.swing.JMenuItem();

        destiPrompt.setTitle("Recipient");
        destiPrompt.setAlwaysOnTop(true);
        destiPrompt.setLocationByPlatform(true);
        destiPrompt.setMinimumSize(new java.awt.Dimension(350, 275));
        destiPrompt.setResizable(false);

        jLabel4.setText("Recipient Category");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        receiverCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                receiverCategoryItemStateChanged(evt);
            }
        });

        addCatButton.setText("Add Category");
        addCatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCatButtonActionPerformed(evt);
            }
        });

        addRecButton.setText("Add Recipient");
        addRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecButtonActionPerformed(evt);
            }
        });

        delCatButton.setText("Delete Category");
        delCatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCatButtonActionPerformed(evt);
            }
        });

        delRecButton.setText("Delete Recipient");
        delRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delRecButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout destiPromptLayout = new javax.swing.GroupLayout(destiPrompt.getContentPane());
        destiPrompt.getContentPane().setLayout(destiPromptLayout);
        destiPromptLayout.setHorizontalGroup(
            destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destiPromptLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(destiPromptLayout.createSequentialGroup()
                        .addGroup(destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delRecButton)
                            .addComponent(delCatButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(destiPromptLayout.createSequentialGroup()
                        .addGroup(destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRecButton)
                            .addGroup(destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4)
                                .addComponent(receiverCategory, 0, 250, Short.MAX_VALUE)
                                .addComponent(receiverText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(destiPromptLayout.createSequentialGroup()
                                .addComponent(addCatButton)
                                .addGap(59, 59, 59)
                                .addComponent(okButton)
                                .addGap(18, 18, 18)
                                .addComponent(cancelButton)))
                        .addGap(27, 32, Short.MAX_VALUE))))
        );
        destiPromptLayout.setVerticalGroup(
            destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destiPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receiverCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(receiverText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(destiPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(addCatButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addRecButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delCatButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delRecButton)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        addPrompt.setTitle("Enter Text");
        addPrompt.setMinimumSize(new java.awt.Dimension(315, 175));

        jLabel5.setText("Enter text to add");

        addTextConfirm.setText("OK");
        addTextConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTextConfirmActionPerformed(evt);
            }
        });

        addTextCancel.setText("Cancel");
        addTextCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTextCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPromptLayout = new javax.swing.GroupLayout(addPrompt.getContentPane());
        addPrompt.getContentPane().setLayout(addPromptLayout);
        addPromptLayout.setHorizontalGroup(
            addPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(addPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(addPromptLayout.createSequentialGroup()
                            .addComponent(addTextConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addTextCancel))
                        .addComponent(enterText, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        addPromptLayout.setVerticalGroup(
            addPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTextConfirm)
                    .addComponent(addTextCancel))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        addSeasonPrompt.setTitle("Add Season");
        addSeasonPrompt.setMinimumSize(new java.awt.Dimension(275, 185));
        addSeasonPrompt.setResizable(false);

        jLabel7.setText("Enter 4 Character season code:");

        jLabel8.setText("Enter Season Code Meaning:");

        seasonPromptConfirm.setText("OK");
        seasonPromptConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonPromptConfirmActionPerformed(evt);
            }
        });

        seasonPromptCancel.setText("Cancel");
        seasonPromptCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonPromptCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addSeasonPromptLayout = new javax.swing.GroupLayout(addSeasonPrompt.getContentPane());
        addSeasonPrompt.getContentPane().setLayout(addSeasonPromptLayout);
        addSeasonPromptLayout.setHorizontalGroup(
            addSeasonPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSeasonPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSeasonPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(seasonCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addGroup(addSeasonPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addSeasonPromptLayout.createSequentialGroup()
                            .addComponent(seasonPromptConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(seasonPromptCancel))
                        .addComponent(seasonCodeMeaningText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        addSeasonPromptLayout.setVerticalGroup(
            addSeasonPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSeasonPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seasonCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seasonCodeMeaningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addSeasonPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seasonPromptConfirm)
                    .addComponent(seasonPromptCancel))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        addFabricPrompt.setTitle("Add Fabric");
        addFabricPrompt.setMinimumSize(new java.awt.Dimension(275, 185));
        addFabricPrompt.setResizable(false);

        jLabel9.setText("Enter Fabric Code:");

        jLabel10.setText("Enter Fabric Code Meaning:");

        fabricPromptConfirm.setText("OK");
        fabricPromptConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fabricPromptConfirmActionPerformed(evt);
            }
        });

        fabricPromptCancel.setText("Cancel");
        fabricPromptCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fabricPromptCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addFabricPromptLayout = new javax.swing.GroupLayout(addFabricPrompt.getContentPane());
        addFabricPrompt.getContentPane().setLayout(addFabricPromptLayout);
        addFabricPromptLayout.setHorizontalGroup(
            addFabricPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFabricPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addFabricPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(fabCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addGroup(addFabricPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addFabricPromptLayout.createSequentialGroup()
                            .addComponent(fabricPromptConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fabricPromptCancel))
                        .addComponent(fabCodeMeaningText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        addFabricPromptLayout.setVerticalGroup(
            addFabricPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFabricPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fabCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fabCodeMeaningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addFabricPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fabricPromptConfirm)
                    .addComponent(fabricPromptCancel))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        addClothingPrompt.setTitle("Add Clothing Code");
        addClothingPrompt.setMinimumSize(new java.awt.Dimension(285, 185));

        jLabel11.setText("Enter Clothing Code:");

        jLabel12.setText("Enter Clothing Code Meaning:");

        clothingPromptConfirm.setText("OK");
        clothingPromptConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clothingPromptConfirmActionPerformed(evt);
            }
        });

        clothingPromptCancel.setText("Cancel");
        clothingPromptCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clothingPromptCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addClothingPromptLayout = new javax.swing.GroupLayout(addClothingPrompt.getContentPane());
        addClothingPrompt.getContentPane().setLayout(addClothingPromptLayout);
        addClothingPromptLayout.setHorizontalGroup(
            addClothingPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addClothingPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addClothingPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(clothingCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addGroup(addClothingPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addClothingPromptLayout.createSequentialGroup()
                            .addComponent(clothingPromptConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clothingPromptCancel))
                        .addComponent(clothingCodeMeaningText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        addClothingPromptLayout.setVerticalGroup(
            addClothingPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addClothingPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clothingCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clothingCodeMeaningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addClothingPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clothingPromptCancel)
                    .addComponent(clothingPromptConfirm))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        editPrompt.setTitle("Edit");

        editCategory.setText("Category");

        editValues.setText("Values");

        javax.swing.GroupLayout editPromptLayout = new javax.swing.GroupLayout(editPrompt.getContentPane());
        editPrompt.getContentPane().setLayout(editPromptLayout);
        editPromptLayout.setHorizontalGroup(
            editPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editCategory)
                    .addComponent(editCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editValues)
                    .addComponent(editValuesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        editPromptLayout.setVerticalGroup(
            editPromptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPromptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editValues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editValuesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BarCoder");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(800, 677));

        jLabel1.setText("Inputted Barcode");

        barcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeActionPerformed(evt);
            }
        });
        barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeKeyPressed(evt);
            }
        });

        jLabel2.setText("List of inputs");

        BarcodeList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BarcodeList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BarcodeListItemStateChanged(evt);
            }
        });

        barcodeInfo.setColumns(20);
        barcodeInfo.setRows(5);
        barcodeInfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeInfoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(barcodeInfo);

        jLabel3.setText("Barcode Data");

        destButton.setText("Set Destination");
        destButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Incoming");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Outgoing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jRadioButton1, jRadioButton2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jRadioButton1, jRadioButton2});

        jLabel6.setText("Image");

        img.setMaximumSize(new java.awt.Dimension(250, 285));
        img.setMinimumSize(new java.awt.Dimension(250, 285));

        jLabel13.setText("Set Due Date");

        jMenu1.setText("File");

        addSeason.setText("Add Season");
        addSeason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSeasonActionPerformed(evt);
            }
        });
        jMenu1.add(addSeason);

        addFabric.setText("Add Fabric Type");
        addFabric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFabricActionPerformed(evt);
            }
        });
        jMenu1.add(addFabric);

        addClothing.setText("Add Clothing Code");
        addClothing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClothingActionPerformed(evt);
            }
        });
        jMenu1.add(addClothing);

        saveOverdue.setText("Save Overdue Items to CSV");
        saveOverdue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOverdueActionPerformed(evt);
            }
        });
        jMenu1.add(saveOverdue);

        saveToCSV.setText("Save Barcode DB to XLS");
        saveToCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToCSVActionPerformed(evt);
            }
        });
        jMenu1.add(saveToCSV);
        jMenu1.add(jSeparator1);

        exitProg.setText("Exit");
        exitProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitProgActionPerformed(evt);
            }
        });
        jMenu1.add(exitProg);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        editSeason.setText("Edit Seasons");
        jMenu2.add(editSeason);

        editFabric.setText("Edit Fabric Types");
        jMenu2.add(editFabric);

        editClothing.setText("Edit Clothing Codes");
        jMenu2.add(editClothing);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(barcode)
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(destButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(128, 128, 128)
                                                        .addComponent(deleteButton))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(80, 80, 80)
                                                        .addComponent(jLabel13)))))))
                                .addGap(92, 92, 92))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2)
                        .addGap(180, 180, 180))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BarcodeList, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BarcodeList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(destButton)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );

        barcode.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void barcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String timeStamp = new SimpleDateFormat("yyyy/MM/dd_HH:mm:ss").format(Calendar.getInstance().getTime());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            inOut = "";
            String fabType = "";
            String clothingType = "";
            String tempName = "";
            String season = "";
            String color = "";
            Calendar dueDate = dueDatePicker.getSelectedDate();
            
            if (jRadioButton1.isSelected()){
                inOut = jRadioButton1.getText();
            }
            if (jRadioButton2.isSelected()){
                inOut = jRadioButton2.getText();
            }
            Barcode newBarcode = new Barcode(barcode.getText(), dueDate);
            //check for duplicate scan
            int lastIndex = -1;
            int selectedItem = 0;
            
            while (selectedItem < BarCoder.barcodeDB.size()) {
                if (BarCoder.barcodeDB.get(selectedItem).name.equals(newBarcode.name)) {
                    lastIndex = selectedItem;
                }
                selectedItem++;
            }
            if (lastIndex != -1) {
                int option = JOptionPane.showConfirmDialog(this, "Yes to Add New Barcode Entry to DB, No to update destination history. Cancel in top right.", "Duplicate Scan Detected!", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    int dupeCount = 0;
                    for (int dupeCounter = 0; dupeCounter < BarCoder.barcodeDB.size(); dupeCounter++) {
                        if (BarCoder.barcodeDB.get(dupeCounter).name.contains(newBarcode.name)) {
                            dupeCount++;
                        }

                    }
                    newBarcode.name = newBarcode.name + "-" + dupeCount;
                    barcode.setText(barcode.getText() + "-" + dupeCount);
                } else if (option == JOptionPane.NO_OPTION) {
                    //Update Transit Status, Location
                    //Pick Which Duplicate entry to update
                    ArrayList<String> dupeList = new ArrayList<>();
                    for (int dupeCounter = 0; dupeCounter < BarCoder.barcodeDB.size(); dupeCounter++) {
                        if (BarCoder.barcodeDB.get(dupeCounter).name.contains(newBarcode.name)) {
                            dupeList.add(BarCoder.barcodeDB.get(dupeCounter).name);
                        }

                    }
                    Object[] options = dupeList.toArray();
                    Object dupeChoice = JOptionPane.showInputDialog(null, "Choose duplicate entry to update", "Duplicate Entry Update", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                    int index = dupeList.indexOf(dupeChoice);
                    String dupe2Update = dupeList.get(index);
                    for (lastIndex = 0; lastIndex < BarCoder.barcodeDB.size(); lastIndex++){
                        if (BarCoder.barcodeDB.get(lastIndex).name.equals(dupe2Update))
                        {
                            break;
                        }
                    }
                    BarCoder.barcodeDB.get(lastIndex).Destinations.add(destination + " - " + inOut);
                    BarCoder.barcodeDB.get(lastIndex).inOut = inOut;
                    BarCoder.barcodeDB.get(lastIndex).date = Calendar.getInstance();
                    BarCoder.barcodeDB.get(lastIndex).dueDate = dueDate;
                    barcodeInfo.setText(BarCoder.barcodeDB.get(lastIndex).dataDate());
                    barcode.setText("");
                    return;
                } else {
                    barcode.setText("");
                    return;
                }
            }


            
            newBarcode.date = Calendar.getInstance();
            //decode barcode here
            //find season in DB
            for (int counter2 = 0; counter2 < BarCoder.seasonDB.size(); counter2++){
                if (newBarcode.name.startsWith(BarCoder.seasonDB.get(counter2).seasonID)){
                    season = BarCoder.seasonDB.get(counter2).seasonMeaning;
                }
            }
            //Check Color
            
            int underScore = newBarcode.name.indexOf("_");
            if (underScore == -1){
                tempName = newBarcode.name.substring(4);
                underScore = newBarcode.name.length() - 1;
            }
            else{
                tempName = newBarcode.name.substring(4, underScore);
            }
            
            
            //find fabType in DB
            for (int counter = 0; counter < BarCoder.fabricDB.size(); counter++) {
                if (tempName.endsWith(BarCoder.fabricDB.get(counter).fabricID)) {
                    fabType = BarCoder.fabricDB.get(counter).fabricMeaning;
                }
            }
            //find clothingType in DB
            for (int counter3 = 0; counter3 < BarCoder.clothesDB.size(); counter3++){
                if (tempName.startsWith(BarCoder.clothesDB.get(counter3).clothesID)){
                    clothingType = BarCoder.clothesDB.get(counter3).clothesMeaning;
                }
            }
            //Color at end of string
            color = newBarcode.name.substring(underScore + 1);
            newBarcode.inOut = inOut;
            newBarcode.Destinations.add(destination + " - " + inOut);
            newBarcode.dueDate = dueDate;
            newBarcode.changeData(season + "\n" + clothingType + " - " + fabType + "\n" + "Color: " + color);
           
            BarCoder.barcodeDB.add(newBarcode);
            BarcodeList.add(barcode.getText());
            barcode.setText("");
            //Add Image for barcode
            BarcodeList.select(BarcodeList.getItemCount()-1);
            Barcode tempBar2 = new Barcode(BarcodeList.getSelectedItem());
            int selectedItem2 = 0;

            while (selectedItem2 < BarCoder.barcodeDB.size()) {
                if (BarCoder.barcodeDB.get(selectedItem2).name.equals(tempBar2.name)) {
                    break;
                }
                selectedItem2++;
            }
            barcodeInfo.setText(BarCoder.barcodeDB.get(selectedItem2).dataDate());
            File dir[] = new File(clothesDir).listFiles();
            for (File f : dir) {
                if (f.getName().startsWith(tempName)){
                    ImageIcon icon;
                    icon = new ImageIcon(clothesDir + f.getName());
                    img.setIcon(icon);
                    img.setText("");
                    break;
                }
                img.setIcon(null);
                img.setText("Image Not Found");
            }
            try {
                SerializationUtil.serialize(BarCoder.barcodeDB, fileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
    }//GEN-LAST:event_barcodeKeyPressed
    
    private void BarcodeListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BarcodeListItemStateChanged
        // TODO add your handling code here:
        Barcode tempBar = new Barcode(BarcodeList.getSelectedItem());
        String tempName = tempBar.name;
        if (tempBar.name.indexOf("-") != -1){
            tempName = tempBar.name.substring(0, tempBar.name.indexOf("-"));
        }
        int selectedItem = 0;

        while (selectedItem < BarCoder.barcodeDB.size()) {
            if (BarCoder.barcodeDB.get(selectedItem).name.equals(tempBar.name)) {
                break;
            }
            selectedItem++;
        }
        barcodeInfo.setText(BarCoder.barcodeDB.get(selectedItem).dataDate());
        File dir[] = new File(clothesDir).listFiles();
            for (File f : dir) {
                if (f.getName().contains(tempName)){
                    ImageIcon icon;
                    icon = new ImageIcon(clothesDir + f.getName());
                    img.setIcon(icon);
                    img.setText("");
                    break;
                }
                img.setIcon(null);
                img.setText("Image Not Found");
            }
    }//GEN-LAST:event_BarcodeListItemStateChanged

    private void destButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destButtonActionPerformed
        // TODO add your handling code here:
        destiPrompt.setVisible(true);
    }//GEN-LAST:event_destButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        destination = (String) receiverText.getSelectedItem();
        destiPrompt.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        destiPrompt.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        //Probably wanna do a prompt for this...
        if (BarcodeList.getItemCount() == 0) {
            barcodeInfo.setText("");
            return;
        }
        int option = JOptionPane.showConfirmDialog(this, "Delete selected barcode entry?", "Delete Barcode?", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            Barcode tempBar = new Barcode(BarcodeList.getSelectedItem());
            int selectedItem = 0;

            while (selectedItem < BarCoder.barcodeDB.size()) {
                if (BarCoder.barcodeDB.get(selectedItem).name.equals(tempBar.name)) {
                    break;
                }
                selectedItem++;
            }
            BarCoder.barcodeDB.remove(selectedItem);
            BarcodeList.remove(selectedItem);
            if (selectedItem > 0) {
                BarcodeList.select(selectedItem - 1);
                Barcode tempBar2 = new Barcode(BarcodeList.getSelectedItem());
                int selectedItem2 = 0;

                while (selectedItem < BarCoder.barcodeDB.size()) {
                    if (BarCoder.barcodeDB.get(selectedItem2).name.equals(tempBar2.name)) {
                        break;
                    }
                    selectedItem++;
                }
                barcodeInfo.setText(BarCoder.barcodeDB.get(selectedItem2).dataDate());
                File dir[] = new File(clothesDir).listFiles();
                for (File f : dir) {
                    if (f.getName().startsWith(BarCoder.barcodeDB.get(selectedItem2).name)) {
                        ImageIcon icon;
                        icon = new ImageIcon(clothesDir + f.getName());
                        img.setIcon(icon);
                        img.setText("");
                        break;
                    }
                    img.setIcon(null);
                    img.setText("Image Not Found");
                }
            }
            try {
                SerializationUtil.serialize(BarCoder.barcodeDB, fileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        } else
            return;
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void barcodeInfoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeInfoKeyReleased
        // TODO add your handling code here: Each area needs to be taken care of to the proper part of the barcode, price location etc etc
        if (BarcodeList.getItemCount() == 0) {
            return;
        } else {
            Barcode tempBar = new Barcode(BarcodeList.getSelectedItem());
            int selectedItem = 0;
            String nl = "\n";
            String[] textAdd = barcodeInfo.getText().split(nl);
            String bcData = textAdd[2] + "\n" + textAdd[3] + "\n" + textAdd[4];
            String bcPrice = textAdd[5].substring(textAdd[5].indexOf(":") + 1).trim();
            String bcDamaged = textAdd[8].substring(textAdd[8].indexOf(":") + 1).trim();
            String bcLost = textAdd[9].substring(textAdd[9].indexOf(":") + 1).trim();
            String bcInOut = textAdd[1].substring(textAdd[1].indexOf(":") + 1).trim();
            while (selectedItem < BarCoder.barcodeDB.size()) {
                if (BarCoder.barcodeDB.get(selectedItem).name.equals(tempBar.name)) {
                    break;
                }
                selectedItem++;
            }
            BarCoder.barcodeDB.get(selectedItem).changeData(bcData);
            BarCoder.barcodeDB.get(selectedItem).damaged = bcDamaged;
            BarCoder.barcodeDB.get(selectedItem).inOut = bcInOut;
            BarCoder.barcodeDB.get(selectedItem).price = bcPrice;
            BarCoder.barcodeDB.get(selectedItem).lost = bcLost;
            try {
                SerializationUtil.serialize(BarCoder.barcodeDB, fileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
    }//GEN-LAST:event_barcodeInfoKeyReleased

    private void receiverCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_receiverCategoryItemStateChanged
        // TODO add your handling code here:
        if (receiverCategory.getItemCount() == 0){
            return;
        } else {
            destination = (String) receiverCategory.getSelectedItem();
            int selectedItem = 0;
            while (selectedItem < BarCoder.recipientDB.size()) {
                if (BarCoder.recipientDB.get(selectedItem).categoryName.equals(destination)) {
                    break;
                }
                selectedItem++;
            }
            receiverText.removeAllItems();
            for (int i = 0; i < BarCoder.recipientDB.get(selectedItem).recipients.size(); i++) {
                receiverText.addItem(BarCoder.recipientDB.get(selectedItem).recipients.get(i));
            }
        }
        
    }//GEN-LAST:event_receiverCategoryItemStateChanged

    private void addCatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCatButtonActionPerformed
        // TODO add your handling code here:
        catrec = false;
        addPrompt.setVisible(true);
        
    }//GEN-LAST:event_addCatButtonActionPerformed

    private void addRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecButtonActionPerformed
        // TODO add your handling code here:
        catrec = true;
        addPrompt.setVisible(true);
    }//GEN-LAST:event_addRecButtonActionPerformed

    private void delCatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCatButtonActionPerformed
        // TODO add your handling code here:
        if (receiverCategory.getItemCount() == 0) {
            return;
        } else {
            Recipients tempReceive = new Recipients((String) receiverCategory.getSelectedItem());
            int selectedItem = 0;

            while (selectedItem < BarCoder.recipientDB.size()) {
                if (BarCoder.recipientDB.get(selectedItem).categoryName.equals(tempReceive.categoryName)) {
                    break;
                }
                selectedItem++;
            }
            BarCoder.recipientDB.remove(selectedItem);
            receiverCategory.removeItemAt(selectedItem);
            try {
                SerializationUtil.serialize(BarCoder.recipientDB, recFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
    }//GEN-LAST:event_delCatButtonActionPerformed

    private void delRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delRecButtonActionPerformed
        // TODO add your handling code here:
        if (receiverText.getItemCount() == 0) {
            return;
        }
        String tempReceive = ((String) receiverText.getSelectedItem());
        int selectedItem = 0;
        int recDBIndex = receiverCategory.getSelectedIndex();

        while (selectedItem < BarCoder.recipientDB.size()) {
            if (BarCoder.recipientDB.get(recDBIndex).recipients.get(selectedItem).equals(tempReceive)) {
                break;
            }
            selectedItem++;
        }
        BarCoder.recipientDB.get(recDBIndex).recipients.remove(selectedItem);
        receiverText.removeItemAt(selectedItem);
        try {
            SerializationUtil.serialize(BarCoder.recipientDB, recFileName);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_delRecButtonActionPerformed

    private void addTextCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTextCancelActionPerformed
        // TODO add your handling code here:
        addPrompt.dispose();
    }//GEN-LAST:event_addTextCancelActionPerformed

    private void addTextConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTextConfirmActionPerformed
        // TODO add your handling code here:
        addVal = enterText.getText();
        if (catrec == true) {
            String tempReceive = ((String) receiverCategory.getSelectedItem());
            int selectedItem = 0;
            int recDBIndex = receiverCategory.getSelectedIndex();

            while (selectedItem < BarCoder.recipientDB.size()) {
                if (BarCoder.recipientDB.get(recDBIndex).categoryName.equals(tempReceive)) {
                    break;
                }
                selectedItem++;
            }
            BarCoder.recipientDB.get(recDBIndex).recipients.add(addVal);
            receiverText.addItem(addVal);
            try {
                SerializationUtil.serialize(BarCoder.recipientDB, recFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
        else if (catrec == false){
            Recipients newReceive = new Recipients(addVal);
            BarCoder.recipientDB.add(newReceive);
            receiverCategory.addItem(addVal);
            try {
                SerializationUtil.serialize(BarCoder.recipientDB, recFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
        enterText.setText("");
        addPrompt.dispose();
    }//GEN-LAST:event_addTextConfirmActionPerformed

    private void addSeasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSeasonActionPerformed
        // TODO add your handling code here:
        addSeasonPrompt.setVisible(true);
    }//GEN-LAST:event_addSeasonActionPerformed

    private void saveToCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToCSVActionPerformed
        // TODO add your handling code here: Make Excel sheet
        try{
            WritableWorkbook workbook = Workbook.createWorkbook(new File("inventory.xls"));
            WritableSheet sheet = workbook.createSheet("Inventory", 0);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd_HH:mm:ss");
            Label label = new Label (0, 0, "Date");
            sheet.addCell(label);
            Label label2 = new Label (1, 0, "Item ID");
            sheet.addCell(label2);
            Label label3 = new Label (2, 0, "Season");
            sheet.addCell(label3);
            Label label4 = new Label (3, 0, "Status");
            sheet.addCell(label4);
            Label label5 = new Label (4, 0, "Item");
            sheet.addCell(label5);
            Label label6 = new Label (5, 0, "Price");
            sheet.addCell(label6);
            Label label7 = new Label (6, 0, "Destination");
            sheet.addCell(label7);
            Label label8 = new Label (7, 0, "Damaged?");
            sheet.addCell(label8);
            Label label9 = new Label (8, 0, "Lost?");
            sheet.addCell(label9);
            Label label10 = new Label (9, 0, "Picture (If available)");
            sheet.addCell(label10);
            
            int barcodeCounter = 1;
            for (Barcode barcode : BarCoder.barcodeDB)
            {
                Label barDateLabel = new Label (0, barcodeCounter, sdf.format(barcode.date.getTime()));
                Label barItemIDLabel = new Label (1, barcodeCounter, barcode.name);
                String barSeason = barcode.data.substring(0, barcode.data.indexOf("\n"));
                String barItem = barcode.data.substring(barcode.data.indexOf("\n"));
                Label barSeasonLabel = new Label(2, barcodeCounter, barSeason);
                Label barItemLabel = new Label(4, barcodeCounter, barItem);
                Label barStatusLabel = new Label(3, barcodeCounter, barcode.inOut);
                Label barPriceLabel = new Label(5, barcodeCounter, barcode.price);
                Label barDestinationLabel = new Label(6, barcodeCounter, barcode.Destinations.toString());
                Label barDamagedLabel = new Label (7, barcodeCounter, barcode.damaged);
                Label barLostLabel = new Label (8, barcodeCounter, barcode.lost);
                File dir[] = new File(clothesDir).listFiles();
                for (File f : dir) {
                    if (f.getName().contains(barcode.name.substring(4))) {
                        java.io.File imageFile = new java.io.File(clothesDir + f.getName());
                        BufferedImage input = ImageIO.read(imageFile);
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        ImageIO.write(input, "PNG", baos);
                        sheet.addImage(new WritableImage(9,barcodeCounter,5,8,baos.toByteArray()));
                        break;
                    }
                }
                sheet.addCell(barDateLabel);
                sheet.addCell(barItemIDLabel);
                sheet.addCell(barSeasonLabel);
                sheet.addCell(barItemLabel);
                sheet.addCell(barStatusLabel);
                sheet.addCell(barPriceLabel);
                sheet.addCell(barDestinationLabel);
                sheet.addCell(barDamagedLabel);
                sheet.addCell(barLostLabel);
                barcodeCounter = barcodeCounter + 8;
            }
            
            workbook.write();
            workbook.close();
        } catch (IOException e){
            e.printStackTrace();
        } catch (RowsExceededException e){
            e.printStackTrace();
        } catch (WriteException e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_saveToCSVActionPerformed

    private void seasonPromptConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonPromptConfirmActionPerformed
        // TODO add your handling code here:
        if (seasonCodeText.getText().length() != 4 || (seasonCodeText.getText().equals("")) || (seasonCodeMeaningText.getText().equals(""))){
            seasonCodeText.setText("ERROR");
        } else {
            Season newSeason = new Season(seasonCodeText.getText(), seasonCodeMeaningText.getText());
            BarCoder.seasonDB.add(newSeason);
            try {
                SerializationUtil.serialize(BarCoder.seasonDB, seasonFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            addSeasonPrompt.dispose();
        }
    }//GEN-LAST:event_seasonPromptConfirmActionPerformed

    private void seasonPromptCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonPromptCancelActionPerformed
        // TODO add your handling code here:
        addSeasonPrompt.dispose();
    }//GEN-LAST:event_seasonPromptCancelActionPerformed

    private void fabricPromptCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fabricPromptCancelActionPerformed
        // TODO add your handling code here:
        addFabricPrompt.dispose();
    }//GEN-LAST:event_fabricPromptCancelActionPerformed

    private void fabricPromptConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fabricPromptConfirmActionPerformed
        // TODO add your handling code here:
        if (fabCodeText.getText().equals("") || fabCodeMeaningText.getText().equals("")){
            fabCodeText.setText("ERROR");
        } else {
            Fabric newFabric = new Fabric(fabCodeText.getText(), fabCodeMeaningText.getText());
            BarCoder.fabricDB.add(newFabric);
            try {
                SerializationUtil.serialize(BarCoder.fabricDB, fabFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            addFabricPrompt.dispose();
        }
    }//GEN-LAST:event_fabricPromptConfirmActionPerformed

    private void addFabricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFabricActionPerformed
        // TODO add your handling code here:
        addFabricPrompt.setVisible(true);
    }//GEN-LAST:event_addFabricActionPerformed

    private void clothingPromptCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clothingPromptCancelActionPerformed
        // TODO add your handling code here:
        addClothingPrompt.dispose();
    }//GEN-LAST:event_clothingPromptCancelActionPerformed

    private void clothingPromptConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clothingPromptConfirmActionPerformed
        // TODO add your handling code here:
        if (clothingCodeText.getText().equals("") || clothingCodeMeaningText.getText().equals("")){
            clothingCodeText.setText("ERROR");
        } else {
            Clothes newClothes = new Clothes(clothingCodeText.getText(), clothingCodeMeaningText.getText());
            BarCoder.clothesDB.add(newClothes);
             try {
                SerializationUtil.serialize(BarCoder.clothesDB, clothesFileName);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            addClothingPrompt.dispose();
        }
    }//GEN-LAST:event_clothingPromptConfirmActionPerformed

    private void addClothingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClothingActionPerformed
        // TODO add your handling code here:
        addClothingPrompt.setVisible(true);
    }//GEN-LAST:event_addClothingActionPerformed

    private void exitProgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitProgActionPerformed
        // TODO add your handling code here:
        this.dispose();   
    }//GEN-LAST:event_exitProgActionPerformed

    private void barcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barcodeActionPerformed

    private void saveOverdueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOverdueActionPerformed
        // TODO add your handling code here: Go through list of all items and compare to todays date, then write all to csv
        String CSVFile = "overdueItems.csv";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        try {
            FileWriter writer = new FileWriter(CSVFile);
            writer.append("Overdue Item ID");
            writer.append(",");
            writer.append("Due Date");
            writer.append("\n");
            for (Barcode temp : BarCoder.barcodeDB){
                if (temp.dueDate.before(Calendar.getInstance()))
                {
                    writer.append(temp.name);
                    writer.append(",");
                    writer.append(sdf.format(temp.date.getTime()));
                    writer.append("\n");
                }
            }
            writer.flush();
            writer.close();
        } catch (IOException e){
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_saveOverdueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BarCoderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BarCoderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BarCoderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BarCoderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BarCoderUI().setVisible(true);
            }
        });
    }
    public static boolean catrec;
    public static String addVal;
    public static String inOut;
    public static String destination;
    public String fileName = "barcodedb.bdb";
    public String recFileName = "recipientDB.bdb";
    public String fabFileName = "fabricDB.bdb";
    public String seasonFileName = "seasonsDB.bdb";
    public String clothesFileName = "clothesDB.bdb";
    public String clothesDir = "clothes/JPEG/";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static java.awt.List BarcodeList;
    private javax.swing.JButton addCatButton;
    private javax.swing.JMenuItem addClothing;
    private javax.swing.JDialog addClothingPrompt;
    private javax.swing.JMenuItem addFabric;
    private javax.swing.JDialog addFabricPrompt;
    private javax.swing.JDialog addPrompt;
    private javax.swing.JButton addRecButton;
    private javax.swing.JMenuItem addSeason;
    private javax.swing.JDialog addSeasonPrompt;
    private javax.swing.JButton addTextCancel;
    private javax.swing.JButton addTextConfirm;
    private javax.swing.JTextField barcode;
    public static javax.swing.JTextArea barcodeInfo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField clothingCodeMeaningText;
    private javax.swing.JTextField clothingCodeText;
    private javax.swing.JButton clothingPromptCancel;
    private javax.swing.JButton clothingPromptConfirm;
    private javax.swing.JButton delCatButton;
    private javax.swing.JButton delRecButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton destButton;
    private javax.swing.JDialog destiPrompt;
    private datechooser.beans.DateChooserCombo dueDatePicker;
    private javax.swing.JLabel editCategory;
    private javax.swing.JComboBox editCategoryCombo;
    private javax.swing.JMenuItem editClothing;
    private javax.swing.JMenuItem editFabric;
    private javax.swing.JDialog editPrompt;
    private javax.swing.JMenuItem editSeason;
    private javax.swing.JLabel editValues;
    private javax.swing.JComboBox editValuesCombo;
    private javax.swing.JTextField enterText;
    private javax.swing.JMenuItem exitProg;
    private javax.swing.JTextField fabCodeMeaningText;
    private javax.swing.JTextField fabCodeText;
    private javax.swing.JButton fabricPromptCancel;
    private javax.swing.JButton fabricPromptConfirm;
    private javax.swing.JLabel img;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox receiverCategory;
    private javax.swing.JComboBox receiverText;
    private javax.swing.JMenuItem saveOverdue;
    private javax.swing.JMenuItem saveToCSV;
    private javax.swing.JTextField seasonCodeMeaningText;
    private javax.swing.JTextField seasonCodeText;
    private javax.swing.JButton seasonPromptCancel;
    private javax.swing.JButton seasonPromptConfirm;
    // End of variables declaration//GEN-END:variables
}
